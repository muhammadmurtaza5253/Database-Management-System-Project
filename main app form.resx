<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        TkSuQmCC
</value>
  </data>
</root>